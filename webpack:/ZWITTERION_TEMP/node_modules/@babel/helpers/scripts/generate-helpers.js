
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
import fs from null;
import { join } from null;
import { URL, fileURLToPath } from null;
import { minify } from "../../../terser/main.js"; // eslint-disable-line import/no-extraneous-dependencies
const HELPERS_FOLDER = new URL("../src/helpers", import.meta.url);
const IGNORED_FILES = new Set(["package.json"]);
export default function generateHelpers() {
  return __awaiter(this, void 0, void 0, function* () {
    let output = `/*
 * This file is auto-generated! Do not modify it directly.
 * To re-generate run 'yarn gulp generate-runtime-helpers'
 */

import template from "@babel/template";

function helper(minVersion: string, source: string) {
  return Object.freeze({
    minVersion,
    ast: () => template.program.ast(source, { preserveComments: true }),
  })
}

export default Object.freeze({
`;
    for (const file of (yield fs.promises.readdir(HELPERS_FOLDER)).sort()) {
      if (IGNORED_FILES.has(file)) continue;
      if (file.startsWith(".")) continue; // ignore e.g. vim swap files
      const [helperName] = file.split(".");
      const filePath = join(fileURLToPath(HELPERS_FOLDER), file);
      if (!file.endsWith(".js")) {
        console.error("ignoring", filePath);
        continue;
      }
      const fileContents = yield fs.promises.readFile(filePath, "utf8");
      const minVersionMatch = fileContents.match(/^\s*\/\*\s*@minVersion\s+(?<minVersion>\S+)\s*\*\/\s*$/m);
      if (!minVersionMatch) {
        throw new Error(`@minVersion number missing in ${filePath}`);
      }
      const {
        minVersion
      } = minVersionMatch.groups;
      const source = yield minify(fileContents, {
        mangle: false,
        // The _typeof helper has a custom directive that we must keep
        compress: {
          directives: false
        }
      });
      output += `\
  ${JSON.stringify(helperName)}: helper(
    ${JSON.stringify(minVersion)},
    ${JSON.stringify(source.code)},
  ),
`;
    }
    output += "});";
    return output;
  });
}
    