
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PathVisitor = void 0;
const base_1 = require("./base");
const _1 = require(".");
class PathVisitor extends base_1.BaseVisitor {
  constructor() {
    super(...arguments);
    this.currentPath = [];
  }
  _visit(node) {
    this.currentPath.push(node);
    super._visit(node);
    this.currentPath.pop();
  }
  get currentNode() {
    return this.currentPath[this.currentPath.length - 1];
  }
  get currentParent() {
    if (this.currentPath.length == 1) return this.currentNode;
    return this.currentPath[this.currentPath.length - 2];
  }
  get currentParentPath() {
    return this.currentPath.slice(0, this.currentPath.length - 1);
  }
  get currentGrandParentPath() {
    return this.currentPath.length < 3 ? [] : this.currentPath.slice(0, this.currentPath.length - 2);
  }
  cloneCurrentNode() {
    return _1.utils.cloneNode(this.currentNode);
  }
  replaceCurrentNode(node) {
    Object.getOwnPropertyNames(this.currentParent).forEach(name => {
      //@ts-ignore
      const prop = this.currentParent[name];
      if (prop == this.currentNode) {
        //@ts-ignore
        this.currentParent[name] = node;
      }
    });
  }
}
exports.PathVisitor = PathVisitor;
    