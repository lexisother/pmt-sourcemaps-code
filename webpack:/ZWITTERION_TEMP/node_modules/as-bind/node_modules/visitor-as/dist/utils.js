
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUserEntry = exports.cloneNode = exports.toString = exports.not = exports.isLibrary = exports.getDecorator = exports.hasDecorator = exports.isDecorator = exports.decorates = void 0;
const as_1 = require("../as");
const astBuilder_1 = require("./astBuilder");
const cloneDeep = require("lodash.clonedeep");
function decorates(node, name) {
  return node.name.text === name;
}
exports.decorates = decorates;
function isDecorator(name) {
  return node => decorates(node, name);
}
exports.isDecorator = isDecorator;
function hasDecorator(node, name) {
  var _a;
  let decl;
  if (node instanceof as_1.DeclarationStatement) {
    decl = node;
  } else {
    decl = node.declaration;
  }
  // because it could be undefined
  return ((_a = decl.decorators) === null || _a === void 0 ? void 0 : _a.some(isDecorator(name))) == true;
}
exports.hasDecorator = hasDecorator;
function getDecorator(node, name) {
  var _a;
  return (_a = node.decorators) === null || _a === void 0 ? void 0 : _a.find(isDecorator(name));
}
exports.getDecorator = getDecorator;
function isLibrary(node) {
  return node.isLibrary || node.internalPath.startsWith("~lib/rt/");
}
exports.isLibrary = isLibrary;
function not(fn) {
  return t => !fn(t);
}
exports.not = not;
function toString(node) {
  return astBuilder_1.ASTBuilder.build(node);
}
exports.toString = toString;
function cloneNode(node) {
  return cloneDeep(node);
}
exports.cloneNode = cloneNode;
function isUserEntry(source) {
  return source.sourceKind == as_1.SourceKind.USER_ENTRY;
}
exports.isUserEntry = isUserEntry;
    