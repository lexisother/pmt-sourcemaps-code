
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformVisitor = exports.mergeTransformer = exports.PathTransformVisitor = exports.ASTBuilderVisitor = exports.ASTTransformVisitor = void 0;
const base_1 = require("./base");
const as_1 = require("../as");
const astBuilder_1 = require("./astBuilder");
const path_1 = require("./path");
const ts_mixer_1 = require("ts-mixer");
const baseTransform_1 = require("./baseTransform");
class Transform extends as_1.Transform {}
class ASTTransformVisitor extends ts_mixer_1.Mixin(base_1.BaseVisitor, Transform) {}
exports.ASTTransformVisitor = ASTTransformVisitor;
class ASTBuilderVisitor extends ts_mixer_1.Mixin(astBuilder_1.ASTBuilder, Transform) {}
exports.ASTBuilderVisitor = ASTBuilderVisitor;
class PathTransformVisitor extends ts_mixer_1.Mixin(path_1.PathVisitor, Transform) {}
exports.PathTransformVisitor = PathTransformVisitor;
function mergeTransformer(from, to) {
  //@ts-ignore
  to.program = from.program;
  //@ts-ignore
  to.baseDir = from.baseDir;
  //@ts-ignore
  to.stdout = from.stdout;
  //@ts-ignore
  to.stderr = from.stderr;
  //@ts-ignore
  to.log = from.log;
  to.writeFile = from.writeFile;
  to.readFile = from.readFile;
  to.listFiles = from.listFiles;
}
exports.mergeTransformer = mergeTransformer;
class TransformVisitor extends ts_mixer_1.Mixin(baseTransform_1.BaseTransformVisitor, Transform) {}
exports.TransformVisitor = TransformVisitor;
    