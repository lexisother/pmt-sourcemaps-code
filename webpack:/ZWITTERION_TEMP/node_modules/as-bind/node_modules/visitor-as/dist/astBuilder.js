
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

// tslint:disable: as-internal-case
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ASTBuilder = void 0;
const as_1 = require("../as");
const visitor_1 = require("./visitor");
// declare function i64_to_string(i: I64): string;
// import { i64_to_string } from "../../../src/glue/i64"
/** An AST builder. */
class ASTBuilder extends visitor_1.AbstractVisitor {
  constructor() {
    super(...arguments);
    this.sb = [];
    this.indentLevel = 0;
  }
  _visit(node) {
    this.visitNode(node);
  }
  /** Rebuilds the textual source from the specified AST, as far as possible. */
  static build(node) {
    var builder = new ASTBuilder();
    builder.visitNode(node);
    return builder.finish();
  }
  visitNode(node) {
    switch (node.kind) {
      case as_1.NodeKind.SOURCE:
        {
          this.visitSource(node);
          break;
        }
      // types
      case as_1.NodeKind.NAMEDTYPE:
        {
          this.visitNamedTypeNode(node);
          break;
        }
      case as_1.NodeKind.FUNCTIONTYPE:
        {
          this.visitFunctionTypeNode(node);
          break;
        }
      case as_1.NodeKind.TYPEPARAMETER:
        {
          this.visitTypeParameter(node);
          break;
        }
      // expressions
      case as_1.NodeKind.FALSE:
      case as_1.NodeKind.NULL:
      case as_1.NodeKind.SUPER:
      case as_1.NodeKind.THIS:
      case as_1.NodeKind.TRUE:
      case as_1.NodeKind.CONSTRUCTOR:
      case as_1.NodeKind.IDENTIFIER:
        {
          this.visitIdentifierExpression(node);
          break;
        }
      case as_1.NodeKind.ASSERTION:
        {
          this.visitAssertionExpression(node);
          break;
        }
      case as_1.NodeKind.BINARY:
        {
          this.visitBinaryExpression(node);
          break;
        }
      case as_1.NodeKind.CALL:
        {
          this.visitCallExpression(node);
          break;
        }
      case as_1.NodeKind.CLASS:
        {
          this.visitClassExpression(node);
          break;
        }
      case as_1.NodeKind.COMMA:
        {
          this.visitCommaExpression(node);
          break;
        }
      case as_1.NodeKind.ELEMENTACCESS:
        {
          this.visitElementAccessExpression(node);
          break;
        }
      case as_1.NodeKind.FUNCTION:
        {
          this.visitFunctionExpression(node);
          break;
        }
      case as_1.NodeKind.INSTANCEOF:
        {
          this.visitInstanceOfExpression(node);
          break;
        }
      case as_1.NodeKind.LITERAL:
        {
          this.visitLiteralExpression(node);
          break;
        }
      case as_1.NodeKind.NEW:
        {
          this.visitNewExpression(node);
          break;
        }
      case as_1.NodeKind.PARENTHESIZED:
        {
          this.visitParenthesizedExpression(node);
          break;
        }
      case as_1.NodeKind.PROPERTYACCESS:
        {
          this.visitPropertyAccessExpression(node);
          break;
        }
      case as_1.NodeKind.TERNARY:
        {
          this.visitTernaryExpression(node);
          break;
        }
      case as_1.NodeKind.UNARYPOSTFIX:
        {
          this.visitUnaryPostfixExpression(node);
          break;
        }
      case as_1.NodeKind.UNARYPREFIX:
        {
          this.visitUnaryPrefixExpression(node);
          break;
        }
      // statements
      case as_1.NodeKind.BLOCK:
        {
          this.visitBlockStatement(node);
          break;
        }
      case as_1.NodeKind.BREAK:
        {
          this.visitBreakStatement(node);
          break;
        }
      case as_1.NodeKind.CONTINUE:
        {
          this.visitContinueStatement(node);
          break;
        }
      case as_1.NodeKind.DO:
        {
          this.visitDoStatement(node);
          break;
        }
      case as_1.NodeKind.EMPTY:
        {
          this.visitEmptyStatement(node);
          break;
        }
      case as_1.NodeKind.EXPORT:
        {
          this.visitExportStatement(node);
          break;
        }
      case as_1.NodeKind.EXPORTDEFAULT:
        {
          this.visitExportDefaultStatement(node);
          break;
        }
      case as_1.NodeKind.EXPORTIMPORT:
        {
          this.visitExportImportStatement(node);
          break;
        }
      case as_1.NodeKind.EXPRESSION:
        {
          this.visitExpressionStatement(node);
          break;
        }
      case as_1.NodeKind.FOR:
        {
          this.visitForStatement(node);
          break;
        }
      case as_1.NodeKind.FOROF:
        {
          this.visitForOfStatement(node);
          break;
        }
      case as_1.NodeKind.IF:
        {
          this.visitIfStatement(node);
          break;
        }
      case as_1.NodeKind.IMPORT:
        {
          this.visitImportStatement(node);
          break;
        }
      case as_1.NodeKind.RETURN:
        {
          this.visitReturnStatement(node);
          break;
        }
      case as_1.NodeKind.SWITCH:
        {
          this.visitSwitchStatement(node);
          break;
        }
      case as_1.NodeKind.THROW:
        {
          this.visitThrowStatement(node);
          break;
        }
      case as_1.NodeKind.TRY:
        {
          this.visitTryStatement(node);
          break;
        }
      case as_1.NodeKind.VARIABLE:
        {
          this.visitVariableStatement(node);
          break;
        }
      case as_1.NodeKind.WHILE:
        {
          this.visitWhileStatement(node);
          break;
        }
      // declaration statements
      case as_1.NodeKind.CLASSDECLARATION:
        {
          this.visitClassDeclaration(node);
          break;
        }
      case as_1.NodeKind.ENUMDECLARATION:
        {
          this.visitEnumDeclaration(node);
          break;
        }
      case as_1.NodeKind.ENUMVALUEDECLARATION:
        {
          this.visitEnumValueDeclaration(node);
          break;
        }
      case as_1.NodeKind.FIELDDECLARATION:
        {
          this.visitFieldDeclaration(node);
          break;
        }
      case as_1.NodeKind.FUNCTIONDECLARATION:
        {
          this.visitFunctionDeclaration(node);
          break;
        }
      case as_1.NodeKind.IMPORTDECLARATION:
        {
          this.visitImportDeclaration(node);
          break;
        }
      case as_1.NodeKind.INTERFACEDECLARATION:
        {
          this.visitInterfaceDeclaration(node);
          break;
        }
      case as_1.NodeKind.METHODDECLARATION:
        {
          this.visitMethodDeclaration(node);
          break;
        }
      case as_1.NodeKind.NAMESPACEDECLARATION:
        {
          this.visitNamespaceDeclaration(node);
          break;
        }
      case as_1.NodeKind.TYPEDECLARATION:
        {
          this.visitTypeDeclaration(node);
          break;
        }
      case as_1.NodeKind.VARIABLEDECLARATION:
        {
          this.visitVariableDeclaration(node);
          break;
        }
      // other
      case as_1.NodeKind.DECORATOR:
        {
          this.serializeDecorator(node);
          break;
        }
      case as_1.NodeKind.EXPORTMEMBER:
        {
          this.visitExportMember(node);
          break;
        }
      case as_1.NodeKind.PARAMETER:
        {
          this.serializeParameter(node);
          break;
        }
      case as_1.NodeKind.SWITCHCASE:
        {
          this.visitSwitchCase(node);
          break;
        }
      case as_1.NodeKind.INDEXSIGNATURE:
        {
          this.visitIndexSignature(node);
          break;
        }
      default:
        assert(false);
    }
  }
  visitSource(source) {
    var statements = source.statements;
    for (let i = 0, k = statements.length; i < k; ++i) {
      this.visitNodeAndTerminate(statements[i]);
    }
  }
  // types
  visitTypeNode(node) {
    switch (node.kind) {
      case as_1.NodeKind.NAMEDTYPE:
        {
          this.visitNamedTypeNode(node);
          break;
        }
      case as_1.NodeKind.FUNCTIONTYPE:
        {
          this.visitFunctionTypeNode(node);
          break;
        }
      default:
        assert(false);
    }
  }
  visitTypeName(node) {
    this.visitIdentifierExpression(node.identifier);
    var sb = this.sb;
    var current = node.next;
    while (current) {
      sb.push(".");
      this.visitIdentifierExpression(current.identifier);
      current = current.next;
    }
  }
  visitNamedTypeNode(node) {
    this.visitTypeName(node.name);
    var typeArguments = node.typeArguments;
    if (typeArguments) {
      let numTypeArguments = typeArguments.length;
      let sb = this.sb;
      if (numTypeArguments) {
        sb.push("<");
        this.visitTypeNode(typeArguments[0]);
        for (let i = 1; i < numTypeArguments; ++i) {
          sb.push(", ");
          this.visitTypeNode(typeArguments[i]);
        }
        sb.push(">");
      }
      if (node.isNullable) sb.push(" | null");
    }
  }
  visitFunctionTypeNode(node) {
    var isNullable = node.isNullable;
    var sb = this.sb;
    sb.push(isNullable ? "((" : "(");
    var explicitThisType = node.explicitThisType;
    if (explicitThisType) {
      sb.push("this: ");
      this.visitTypeNode(explicitThisType);
    }
    var parameters = node.parameters;
    var numParameters = parameters.length;
    if (numParameters) {
      if (explicitThisType) sb.push(", ");
      this.serializeParameter(parameters[0]);
      for (let i = 1; i < numParameters; ++i) {
        sb.push(", ");
        this.serializeParameter(parameters[i]);
      }
    }
    var returnType = node.returnType;
    if (returnType) {
      sb.push(") => ");
      this.visitTypeNode(returnType);
    } else {
      sb.push(") => void");
    }
    if (isNullable) sb.push(") | null");
  }
  visitTypeParameter(node) {
    this.visitIdentifierExpression(node.name);
    var extendsType = node.extendsType;
    if (extendsType) {
      this.sb.push(" extends ");
      this.visitTypeNode(extendsType);
    }
    var defaultType = node.defaultType;
    if (defaultType) {
      this.sb.push("=");
      this.visitTypeNode(defaultType);
    }
  }
  // expressions
  visitIdentifierExpression(node) {
    if (node.isQuoted) this.visitStringLiteral(node.text);else this.sb.push(node.text);
  }
  visitArrayLiteralExpression(node) {
    var sb = this.sb;
    sb.push("[");
    var elements = node.elementExpressions;
    var numElements = elements.length;
    if (numElements) {
      let element = elements[0];
      if (element) this.visitNode(element);
      for (let i = 1; i < numElements; ++i) {
        element = elements[i];
        sb.push(", ");
        if (element) this.visitNode(element);
      }
    }
    sb.push("]");
  }
  visitObjectLiteralExpression(node) {
    var sb = this.sb;
    var names = node.names;
    var values = node.values;
    var numElements = names.length;
    assert(numElements == values.length);
    if (numElements) {
      sb.push("{\n");
      as_1.indent(sb, ++this.indentLevel);
      this.visitNode(names[0]);
      sb.push(": ");
      this.visitNode(values[0]);
      for (let i = 1; i < numElements; ++i) {
        sb.push(",\n");
        as_1.indent(sb, this.indentLevel);
        let name = names[i];
        let value = values[i];
        if (name === value) {
          this.visitNode(name);
        } else {
          this.visitNode(name);
          sb.push(": ");
          this.visitNode(value);
        }
      }
      sb.push("\n");
      as_1.indent(sb, --this.indentLevel);
      sb.push("}");
    } else {
      sb.push("{}");
    }
  }
  visitAssertionExpression(node) {
    var sb = this.sb;
    switch (node.assertionKind) {
      case as_1.AssertionKind.PREFIX:
        {
          sb.push("<");
          this.visitTypeNode(assert(node.toType));
          sb.push(">");
          this.visitNode(node.expression);
          break;
        }
      case as_1.AssertionKind.AS:
        {
          this.visitNode(node.expression);
          sb.push(" as ");
          this.visitTypeNode(assert(node.toType));
          break;
        }
      case as_1.AssertionKind.NONNULL:
        {
          this.visitNode(node.expression);
          sb.push("!");
          break;
        }
      case as_1.AssertionKind.CONST:
        {
          this.visitNode(node.expression);
          sb.push(" as const");
          break;
        }
      default:
        assert(false);
    }
  }
  visitBinaryExpression(node) {
    var sb = this.sb;
    this.visitNode(node.left);
    sb.push(" ");
    sb.push(as_1.operatorTokenToString(node.operator));
    sb.push(" ");
    this.visitNode(node.right);
  }
  visitCallExpression(node) {
    this.visitNode(node.expression);
    this.visitArguments(node.typeArguments, node.args);
  }
  visitArguments(typeArguments, args) {
    var sb = this.sb;
    if (typeArguments) {
      let numTypeArguments = typeArguments.length;
      if (numTypeArguments) {
        sb.push("<");
        this.visitTypeNode(typeArguments[0]);
        for (let i = 1; i < numTypeArguments; ++i) {
          sb.push(", ");
          this.visitTypeNode(typeArguments[i]);
        }
        sb.push(">(");
      }
    } else {
      sb.push("(");
    }
    var numArgs = args.length;
    if (numArgs) {
      this.visitNode(args[0]);
      for (let i = 1; i < numArgs; ++i) {
        sb.push(", ");
        this.visitNode(args[i]);
      }
    }
    sb.push(")");
  }
  visitClassExpression(node) {
    var declaration = node.declaration;
    this.visitClassDeclaration(declaration);
  }
  visitCommaExpression(node) {
    var expressions = node.expressions;
    var numExpressions = assert(expressions.length);
    this.visitNode(expressions[0]);
    var sb = this.sb;
    for (let i = 1; i < numExpressions; ++i) {
      sb.push(",");
      this.visitNode(expressions[i]);
    }
  }
  visitElementAccessExpression(node) {
    var sb = this.sb;
    this.visitNode(node.expression);
    sb.push("[");
    this.visitNode(node.elementExpression);
    sb.push("]");
  }
  visitFunctionExpression(node) {
    var declaration = node.declaration;
    if (!declaration.arrowKind) {
      if (declaration.name.text.length) {
        this.sb.push("function ");
      } else {
        this.sb.push("function");
      }
    } else {
      assert(declaration.name.text.length == 0);
    }
    this.visitFunctionCommon(declaration);
  }
  visitLiteralExpression(node) {
    switch (node.literalKind) {
      case as_1.LiteralKind.FLOAT:
        {
          this.visitFloatLiteralExpression(node);
          break;
        }
      case as_1.LiteralKind.INTEGER:
        {
          this.visitIntegerLiteralExpression(node);
          break;
        }
      case as_1.LiteralKind.STRING:
        {
          this.visitStringLiteralExpression(node);
          break;
        }
      case as_1.LiteralKind.TEMPLATE:
        {
          this.visitTemplateLiteralExpression(node);
          break;
        }
      case as_1.LiteralKind.REGEXP:
        {
          this.visitRegexpLiteralExpression(node);
          break;
        }
      case as_1.LiteralKind.ARRAY:
        {
          this.visitArrayLiteralExpression(node);
          break;
        }
      case as_1.LiteralKind.OBJECT:
        {
          this.visitObjectLiteralExpression(node);
          break;
        }
      default:
        {
          assert(false);
          break;
        }
    }
  }
  visitFloatLiteralExpression(node) {
    this.sb.push(node.value.toString());
  }
  visitInstanceOfExpression(node) {
    this.visitNode(node.expression);
    this.sb.push(" instanceof ");
    this.visitTypeNode(node.isType);
  }
  visitIntegerLiteralExpression(node) {
    this.sb.push(i64_to_string(node.value));
  }
  visitStringLiteral(str) {
    var sb = this.sb;
    sb.push('"');
    this.visitRawString(str, 34 /* DOUBLEQUOTE */);
    sb.push('"');
  }
  visitRawString(str, quote) {
    var sb = this.sb;
    var off = 0;
    var i = 0;
    for (let k = str.length; i < k;) {
      switch (str.charCodeAt(i)) {
        case 0 /* NULL */:
          {
            if (i > off) sb.push(str.substring(off, off = i + 1));
            sb.push("\\0");
            off = ++i;
            break;
          }
        case 8 /* BACKSPACE */:
          {
            if (i > off) sb.push(str.substring(off, i));
            off = ++i;
            sb.push("\\b");
            break;
          }
        case 9 /* TAB */:
          {
            if (i > off) sb.push(str.substring(off, i));
            off = ++i;
            sb.push("\\t");
            break;
          }
        case 10 /* LINEFEED */:
          {
            if (i > off) sb.push(str.substring(off, i));
            off = ++i;
            sb.push("\\n");
            break;
          }
        case 11 /* VERTICALTAB */:
          {
            if (i > off) sb.push(str.substring(off, i));
            off = ++i;
            sb.push("\\v");
            break;
          }
        case 12 /* FORMFEED */:
          {
            if (i > off) sb.push(str.substring(off, i));
            off = ++i;
            sb.push("\\f");
            break;
          }
        case 13 /* CARRIAGERETURN */:
          {
            if (i > off) sb.push(str.substring(off, i));
            sb.push("\\r");
            off = ++i;
            break;
          }
        case 34 /* DOUBLEQUOTE */:
          {
            if (quote == 34 /* DOUBLEQUOTE */) {
              if (i > off) sb.push(str.substring(off, i));
              sb.push('\\"');
              off = ++i;
            } else {
              ++i;
            }
            break;
          }
        case 39 /* SINGLEQUOTE */:
          {
            if (quote == 39 /* SINGLEQUOTE */) {
              if (i > off) sb.push(str.substring(off, i));
              sb.push("\\'");
              off = ++i;
            } else {
              ++i;
            }
            break;
          }
        case 92 /* BACKSLASH */:
          {
            if (i > off) sb.push(str.substring(off, i));
            sb.push("\\\\");
            off = ++i;
            break;
          }
        case 96 /* BACKTICK */:
          {
            if (quote == 96 /* BACKTICK */) {
              if (i > off) sb.push(str.substring(off, i));
              sb.push("\\`");
              off = ++i;
            } else {
              ++i;
            }
            break;
          }
        default:
          {
            ++i;
            break;
          }
      }
    }
    if (i > off) sb.push(str.substring(off, i));
  }
  visitStringLiteralExpression(node) {
    this.visitStringLiteral(node.value);
  }
  visitTemplateLiteralExpression(node) {
    var sb = this.sb;
    var tag = node.tag;
    var parts = node.parts;
    var expressions = node.expressions;
    if (tag) this.visitNode(tag);
    sb.push("`");
    this.visitRawString(parts[0], 96 /* BACKTICK */);
    assert(parts.length == expressions.length + 1);
    for (let i = 0, k = expressions.length; i < k; ++i) {
      sb.push("${");
      this.visitNode(expressions[i]);
      sb.push("}");
      this.visitRawString(parts[i + 1], 96 /* BACKTICK */);
    }

    sb.push("`");
  }
  visitRegexpLiteralExpression(node) {
    var sb = this.sb;
    sb.push("/");
    sb.push(node.pattern);
    sb.push("/");
    sb.push(node.patternFlags);
  }
  visitNewExpression(node) {
    this.sb.push("new ");
    this.visitTypeName(node.typeName);
    this.visitArguments(node.typeArguments, node.args);
  }
  visitParenthesizedExpression(node) {
    var sb = this.sb;
    sb.push("(");
    this.visitNode(node.expression);
    sb.push(")");
  }
  visitPropertyAccessExpression(node) {
    this.visitNode(node.expression);
    this.sb.push(".");
    this.visitIdentifierExpression(node.property);
  }
  visitTernaryExpression(node) {
    var sb = this.sb;
    this.visitNode(node.condition);
    sb.push(" ? ");
    this.visitNode(node.ifThen);
    sb.push(" : ");
    this.visitNode(node.ifElse);
  }
  visitUnaryExpression(node) {
    switch (node.kind) {
      case as_1.NodeKind.UNARYPOSTFIX:
        {
          this.visitUnaryPostfixExpression(node);
          break;
        }
      case as_1.NodeKind.UNARYPREFIX:
        {
          this.visitUnaryPrefixExpression(node);
          break;
        }
      default:
        assert(false);
    }
  }
  visitUnaryPostfixExpression(node) {
    this.visitNode(node.operand);
    this.sb.push(as_1.operatorTokenToString(node.operator));
  }
  visitUnaryPrefixExpression(node) {
    this.sb.push(as_1.operatorTokenToString(node.operator));
    this.visitNode(node.operand);
  }
  // statements
  visitNodeAndTerminate(node) {
    this.visitNode(node);
    var sb = this.sb;
    if (!sb.length ||
    // leading EmptyStatement
    node.kind == as_1.NodeKind.VARIABLE ||
    // potentially assigns a FunctionExpression
    node.kind == as_1.NodeKind.EXPRESSION // potentially assigns a FunctionExpression
    ) {
      sb.push(";\n");
    } else {
      let last = sb[sb.length - 1];
      let lastCharPos = last.length - 1;
      if (lastCharPos >= 0 && (last.charCodeAt(lastCharPos) == 125 /* CLOSEBRACE */ || last.charCodeAt(lastCharPos) == 59 /* SEMICOLON */)) {
        sb.push("\n");
      } else {
        sb.push(";\n");
      }
    }
  }
  visitBlockStatement(node) {
    var sb = this.sb;
    var statements = node.statements;
    var numStatements = statements.length;
    if (numStatements) {
      sb.push("{\n");
      let indentLevel = ++this.indentLevel;
      for (let i = 0; i < numStatements; ++i) {
        as_1.indent(sb, indentLevel);
        this.visitNodeAndTerminate(statements[i]);
      }
      as_1.indent(sb, --this.indentLevel);
      sb.push("}");
    } else {
      sb.push("{}");
    }
  }
  visitBreakStatement(node) {
    var label = node.label;
    if (label) {
      this.sb.push("break ");
      this.visitIdentifierExpression(label);
    } else {
      this.sb.push("break");
    }
  }
  visitContinueStatement(node) {
    var label = node.label;
    if (label) {
      this.sb.push("continue ");
      this.visitIdentifierExpression(label);
    } else {
      this.sb.push("continue");
    }
  }
  visitClassDeclaration(node, isDefault = false) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    var sb = this.sb;
    if (isDefault) {
      sb.push("export default ");
    } else {
      this.serializeExternalModifiers(node);
    }
    if (node.is(as_1.CommonFlags.ABSTRACT)) sb.push("abstract ");
    if (node.name.text.length) {
      sb.push("class ");
      this.visitIdentifierExpression(node.name);
    } else {
      sb.push("class");
    }
    var typeParameters = node.typeParameters;
    if (typeParameters != null && typeParameters.length > 0) {
      sb.push("<");
      this.visitTypeParameter(typeParameters[0]);
      for (let i = 1, k = typeParameters.length; i < k; ++i) {
        sb.push(", ");
        this.visitTypeParameter(typeParameters[i]);
      }
      sb.push(">");
    }
    var extendsType = node.extendsType;
    if (extendsType) {
      sb.push(" extends ");
      this.visitTypeNode(extendsType);
    }
    var implementsTypes = node.implementsTypes;
    if (implementsTypes) {
      let numImplementsTypes = implementsTypes.length;
      if (numImplementsTypes) {
        sb.push(" implements ");
        this.visitTypeNode(implementsTypes[0]);
        for (let i = 1; i < numImplementsTypes; ++i) {
          sb.push(", ");
          this.visitTypeNode(implementsTypes[i]);
        }
      }
    }
    var indexSignature = node.indexSignature;
    var members = node.members;
    var numMembers = members.length;
    if (indexSignature !== null || numMembers) {
      sb.push(" {\n");
      let indentLevel = ++this.indentLevel;
      if (indexSignature) {
        as_1.indent(sb, indentLevel);
        this.visitNodeAndTerminate(indexSignature);
      }
      for (let i = 0, k = members.length; i < k; ++i) {
        let member = members[i];
        if (member.kind != as_1.NodeKind.FIELDDECLARATION || member.parameterIndex < 0) {
          as_1.indent(sb, indentLevel);
          this.visitNodeAndTerminate(member);
        }
      }
      as_1.indent(sb, --this.indentLevel);
      sb.push("}");
    } else {
      sb.push(" {}");
    }
  }
  visitDoStatement(node) {
    var sb = this.sb;
    sb.push("do ");
    this.visitNode(node.statement);
    if (node.statement.kind == as_1.NodeKind.BLOCK) {
      sb.push(" while (");
    } else {
      sb.push(";\n");
      as_1.indent(sb, this.indentLevel);
      sb.push("while (");
    }
    this.visitNode(node.condition);
    sb.push(")");
  }
  visitEmptyStatement(node) {
    /* nop */
  }
  visitEnumDeclaration(node, isDefault = false) {
    var sb = this.sb;
    if (isDefault) {
      sb.push("export default ");
    } else {
      this.serializeExternalModifiers(node);
    }
    if (node.is(as_1.CommonFlags.CONST)) sb.push("const ");
    sb.push("enum ");
    this.visitIdentifierExpression(node.name);
    var values = node.values;
    var numValues = values.length;
    if (numValues) {
      sb.push(" {\n");
      let indentLevel = ++this.indentLevel;
      as_1.indent(sb, indentLevel);
      this.visitEnumValueDeclaration(node.values[0]);
      for (let i = 1; i < numValues; ++i) {
        sb.push(",\n");
        as_1.indent(sb, indentLevel);
        this.visitEnumValueDeclaration(node.values[i]);
      }
      sb.push("\n");
      as_1.indent(sb, --this.indentLevel);
      sb.push("}");
    } else {
      sb.push(" {}");
    }
  }
  visitEnumValueDeclaration(node) {
    this.visitIdentifierExpression(node.name);
    var initializer = node.initializer;
    if (initializer) {
      this.sb.push(" = ");
      this.visitNode(initializer);
    }
  }
  visitExportImportStatement(node) {
    var sb = this.sb;
    sb.push("export import ");
    this.visitIdentifierExpression(node.externalName);
    sb.push(" = ");
    this.visitIdentifierExpression(node.name);
  }
  visitExportMember(node) {
    this.visitIdentifierExpression(node.localName);
    if (node.exportedName.text != node.localName.text) {
      this.sb.push(" as ");
      this.visitIdentifierExpression(node.exportedName);
    }
  }
  visitExportStatement(node) {
    var sb = this.sb;
    if (node.isDeclare) {
      sb.push("declare ");
    }
    var members = node.members;
    if (members != null && members.length > 0) {
      let numMembers = members.length;
      sb.push("export {\n");
      let indentLevel = ++this.indentLevel;
      as_1.indent(sb, indentLevel);
      this.visitExportMember(members[0]);
      for (let i = 1; i < numMembers; ++i) {
        sb.push(",\n");
        as_1.indent(sb, indentLevel);
        this.visitExportMember(members[i]);
      }
      --this.indentLevel;
      sb.push("\n}");
    } else {
      sb.push("export {}");
    }
    var path = node.path;
    if (path) {
      sb.push(" from ");
      this.visitStringLiteralExpression(path);
    }
    sb.push(";");
  }
  visitExportDefaultStatement(node) {
    var declaration = node.declaration;
    switch (declaration.kind) {
      case as_1.NodeKind.ENUMDECLARATION:
        {
          this.visitEnumDeclaration(declaration, true);
          break;
        }
      case as_1.NodeKind.FUNCTIONDECLARATION:
        {
          this.visitFunctionDeclaration(declaration, true);
          break;
        }
      case as_1.NodeKind.CLASSDECLARATION:
        {
          this.visitClassDeclaration(declaration, true);
          break;
        }
      case as_1.NodeKind.INTERFACEDECLARATION:
        {
          this.visitInterfaceDeclaration(declaration, true);
          break;
        }
      case as_1.NodeKind.NAMESPACEDECLARATION:
        {
          this.visitNamespaceDeclaration(declaration, true);
          break;
        }
      default:
        assert(false);
    }
  }
  visitExpressionStatement(node) {
    this.visitNode(node.expression);
  }
  visitFieldDeclaration(node) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    this.serializeAccessModifiers(node);
    this.visitIdentifierExpression(node.name);
    var sb = this.sb;
    if (node.flags & as_1.CommonFlags.DEFINITELY_ASSIGNED) {
      sb.push("!");
    }
    var type = node.type;
    if (type) {
      sb.push(": ");
      this.visitTypeNode(type);
    }
    var initializer = node.initializer;
    if (initializer) {
      sb.push(" = ");
      this.visitNode(initializer);
    }
  }
  visitForStatement(node) {
    var sb = this.sb;
    sb.push("for (");
    var initializer = node.initializer;
    if (initializer) {
      this.visitNode(initializer);
    }
    var condition = node.condition;
    if (condition) {
      sb.push("; ");
      this.visitNode(condition);
    } else {
      sb.push(";");
    }
    var incrementor = node.incrementor;
    if (incrementor) {
      sb.push("; ");
      this.visitNode(incrementor);
    } else {
      sb.push(";");
    }
    sb.push(") ");
    this.visitNode(node.statement);
  }
  visitForOfStatement(node) {
    var sb = this.sb;
    sb.push("for (");
    this.visitNode(node.variable);
    sb.push(" of ");
    this.visitNode(node.iterable);
    sb.push(") ");
    this.visitNode(node.statement);
  }
  visitFunctionDeclaration(node, isDefault = false) {
    var sb = this.sb;
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    if (isDefault) {
      sb.push("export default ");
    } else {
      this.serializeExternalModifiers(node);
      this.serializeAccessModifiers(node);
    }
    if (node.name.text.length) {
      sb.push("function ");
    } else {
      sb.push("function");
    }
    this.visitFunctionCommon(node);
  }
  visitFunctionCommon(node) {
    var sb = this.sb;
    this.visitIdentifierExpression(node.name);
    var signature = node.signature;
    var typeParameters = node.typeParameters;
    if (typeParameters) {
      let numTypeParameters = typeParameters.length;
      if (numTypeParameters) {
        sb.push("<");
        this.visitTypeParameter(typeParameters[0]);
        for (let i = 1; i < numTypeParameters; ++i) {
          sb.push(", ");
          this.visitTypeParameter(typeParameters[i]);
        }
        sb.push(">");
      }
    }
    if (node.arrowKind == 2 /* ARROW_SINGLE */) {
      let parameters = signature.parameters;
      assert(parameters.length == 1);
      assert(!signature.explicitThisType);
      this.serializeParameter(parameters[0]);
    } else {
      sb.push("(");
      let parameters = signature.parameters;
      let numParameters = parameters.length;
      let explicitThisType = signature.explicitThisType;
      if (explicitThisType) {
        sb.push("this: ");
        this.visitTypeNode(explicitThisType);
      }
      if (numParameters) {
        if (explicitThisType) sb.push(", ");
        this.serializeParameter(parameters[0]);
        for (let i = 1; i < numParameters; ++i) {
          sb.push(", ");
          this.serializeParameter(parameters[i]);
        }
      }
    }
    var body = node.body;
    var returnType = signature.returnType;
    if (node.arrowKind) {
      if (body) {
        if (node.arrowKind == 2 /* ARROW_SINGLE */) {
          assert(as_1.isTypeOmitted(returnType));
        } else {
          if (as_1.isTypeOmitted(returnType)) {
            sb.push(")");
          } else {
            sb.push("): ");
            this.visitTypeNode(returnType);
          }
        }
        sb.push(" => ");
        this.visitNode(body);
      } else {
        assert(!as_1.isTypeOmitted(returnType));
        sb.push(" => ");
        this.visitTypeNode(returnType);
      }
    } else {
      if (!as_1.isTypeOmitted(returnType) && !node.isAny(as_1.CommonFlags.CONSTRUCTOR | as_1.CommonFlags.SET)) {
        sb.push("): ");
        this.visitTypeNode(returnType);
      } else {
        sb.push(")");
      }
      if (body) {
        sb.push(" ");
        this.visitNode(body);
      }
    }
  }
  visitIfStatement(node) {
    var sb = this.sb;
    sb.push("if (");
    this.visitNode(node.condition);
    sb.push(") ");
    var ifTrue = node.ifTrue;
    this.visitNode(ifTrue);
    if (ifTrue.kind != as_1.NodeKind.BLOCK) {
      sb.push(";\n");
    }
    var ifFalse = node.ifFalse;
    if (ifFalse) {
      if (ifTrue.kind == as_1.NodeKind.BLOCK) {
        sb.push(" else ");
      } else {
        sb.push("else ");
      }
      this.visitNode(ifFalse);
    }
  }
  visitImportDeclaration(node) {
    var externalName = node.foreignName;
    var name = node.name;
    this.visitIdentifierExpression(externalName);
    if (externalName.text != name.text) {
      this.sb.push(" as ");
      this.visitIdentifierExpression(name);
    }
  }
  visitImportStatement(node) {
    var sb = this.sb;
    sb.push("import ");
    var declarations = node.declarations;
    var namespaceName = node.namespaceName;
    if (declarations) {
      let numDeclarations = declarations.length;
      if (numDeclarations) {
        sb.push("{\n");
        let indentLevel = ++this.indentLevel;
        as_1.indent(sb, indentLevel);
        this.visitImportDeclaration(declarations[0]);
        for (let i = 1; i < numDeclarations; ++i) {
          sb.push(",\n");
          as_1.indent(sb, indentLevel);
          this.visitImportDeclaration(declarations[i]);
        }
        --this.indentLevel;
        sb.push("\n} from ");
      } else {
        sb.push("{} from ");
      }
    } else if (namespaceName) {
      sb.push("* as ");
      this.visitIdentifierExpression(namespaceName);
      sb.push(" from ");
    }
    this.visitStringLiteralExpression(node.path);
  }
  visitIndexSignature(node) {
    var sb = this.sb;
    sb.push("[key: ");
    this.visitTypeNode(node.keyType);
    sb.push("]: ");
    this.visitTypeNode(node.valueType);
  }
  visitInterfaceDeclaration(node, isDefault = false) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    var sb = this.sb;
    if (isDefault) {
      sb.push("export default ");
    } else {
      this.serializeExternalModifiers(node);
    }
    sb.push("interface ");
    this.visitIdentifierExpression(node.name);
    var typeParameters = node.typeParameters;
    if (typeParameters != null && typeParameters.length > 0) {
      sb.push("<");
      this.visitTypeParameter(typeParameters[0]);
      for (let i = 1, k = typeParameters.length; i < k; ++i) {
        sb.push(", ");
        this.visitTypeParameter(typeParameters[i]);
      }
      sb.push(">");
    }
    var extendsType = node.extendsType;
    if (extendsType) {
      sb.push(" extends ");
      this.visitTypeNode(extendsType);
    }
    // must not have implementsTypes
    sb.push(" {\n");
    var indentLevel = ++this.indentLevel;
    var members = node.members;
    for (let i = 0, k = members.length; i < k; ++i) {
      as_1.indent(sb, indentLevel);
      this.visitNodeAndTerminate(members[i]);
    }
    --this.indentLevel;
    sb.push("}");
  }
  visitMethodDeclaration(node) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    this.serializeAccessModifiers(node);
    if (node.is(as_1.CommonFlags.GET)) {
      this.sb.push("get ");
    } else if (node.is(as_1.CommonFlags.SET)) {
      this.sb.push("set ");
    }
    this.visitFunctionCommon(node);
  }
  visitNamespaceDeclaration(node, isDefault = false) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    var sb = this.sb;
    if (isDefault) {
      sb.push("export default ");
    } else {
      this.serializeExternalModifiers(node);
    }
    sb.push("namespace ");
    this.visitIdentifierExpression(node.name);
    var members = node.members;
    var numMembers = members.length;
    if (numMembers) {
      sb.push(" {\n");
      let indentLevel = ++this.indentLevel;
      for (let i = 0, k = members.length; i < k; ++i) {
        as_1.indent(sb, indentLevel);
        this.visitNodeAndTerminate(members[i]);
      }
      as_1.indent(sb, --this.indentLevel);
      sb.push("}");
    } else {
      sb.push(" {}");
    }
  }
  visitReturnStatement(node) {
    var value = node.value;
    if (value) {
      this.sb.push("return ");
      this.visitNode(value);
    } else {
      this.sb.push("return");
    }
  }
  visitSwitchCase(node) {
    var sb = this.sb;
    var label = node.label;
    if (label) {
      sb.push("case ");
      this.visitNode(label);
      sb.push(":\n");
    } else {
      sb.push("default:\n");
    }
    var statements = node.statements;
    var numStatements = statements.length;
    if (numStatements) {
      let indentLevel = ++this.indentLevel;
      as_1.indent(sb, indentLevel);
      this.visitNodeAndTerminate(statements[0]);
      for (let i = 1; i < numStatements; ++i) {
        as_1.indent(sb, indentLevel);
        this.visitNodeAndTerminate(statements[i]);
      }
      --this.indentLevel;
    }
  }
  visitSwitchStatement(node) {
    var sb = this.sb;
    sb.push("switch (");
    this.visitNode(node.condition);
    sb.push(") {\n");
    var indentLevel = ++this.indentLevel;
    var cases = node.cases;
    for (let i = 0, k = cases.length; i < k; ++i) {
      as_1.indent(sb, indentLevel);
      this.visitSwitchCase(cases[i]);
      sb.push("\n");
    }
    --this.indentLevel;
    sb.push("}");
  }
  visitThrowStatement(node) {
    this.sb.push("throw ");
    this.visitNode(node.value);
  }
  visitTryStatement(node) {
    var sb = this.sb;
    sb.push("try {\n");
    var indentLevel = ++this.indentLevel;
    var statements = node.statements;
    for (let i = 0, k = statements.length; i < k; ++i) {
      as_1.indent(sb, indentLevel);
      this.visitNodeAndTerminate(statements[i]);
    }
    var catchVariable = node.catchVariable;
    if (catchVariable) {
      as_1.indent(sb, indentLevel - 1);
      sb.push("} catch (");
      this.visitIdentifierExpression(catchVariable);
      sb.push(") {\n");
      let catchStatements = node.catchStatements;
      if (catchStatements) {
        for (let i = 0, k = catchStatements.length; i < k; ++i) {
          as_1.indent(sb, indentLevel);
          this.visitNodeAndTerminate(catchStatements[i]);
        }
      }
    }
    var finallyStatements = node.finallyStatements;
    if (finallyStatements) {
      as_1.indent(sb, indentLevel - 1);
      sb.push("} finally {\n");
      for (let i = 0, k = finallyStatements.length; i < k; ++i) {
        as_1.indent(sb, indentLevel);
        this.visitNodeAndTerminate(finallyStatements[i]);
      }
    }
    as_1.indent(sb, indentLevel - 1);
    sb.push("}");
  }
  visitTypeDeclaration(node) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    var sb = this.sb;
    this.serializeExternalModifiers(node);
    sb.push("type ");
    this.visitIdentifierExpression(node.name);
    var typeParameters = node.typeParameters;
    if (typeParameters) {
      let numTypeParameters = typeParameters.length;
      if (numTypeParameters) {
        sb.push("<");
        for (let i = 0; i < numTypeParameters; ++i) {
          this.visitTypeParameter(typeParameters[i]);
        }
        sb.push(">");
      }
    }
    sb.push(" = ");
    this.visitTypeNode(node.type);
  }
  visitVariableDeclaration(node) {
    this.visitIdentifierExpression(node.name);
    var type = node.type;
    var sb = this.sb;
    if (node.flags & as_1.CommonFlags.DEFINITELY_ASSIGNED) {
      sb.push("!");
    }
    if (type) {
      sb.push(": ");
      this.visitTypeNode(type);
    }
    var initializer = node.initializer;
    if (initializer) {
      sb.push(" = ");
      this.visitNode(initializer);
    }
  }
  visitVariableStatement(node) {
    var decorators = node.decorators;
    if (decorators) {
      for (let i = 0, k = decorators.length; i < k; ++i) {
        this.serializeDecorator(decorators[i]);
      }
    }
    var sb = this.sb;
    var declarations = node.declarations;
    var numDeclarations = assert(declarations.length);
    var firstDeclaration = declarations[0];
    this.serializeExternalModifiers(firstDeclaration);
    sb.push(firstDeclaration.is(as_1.CommonFlags.CONST) ? "const " : firstDeclaration.is(as_1.CommonFlags.LET) ? "let " : "var ");
    this.visitVariableDeclaration(node.declarations[0]);
    for (let i = 1; i < numDeclarations; ++i) {
      sb.push(", ");
      this.visitVariableDeclaration(node.declarations[i]);
    }
  }
  visitWhileStatement(node) {
    var sb = this.sb;
    sb.push("while (");
    this.visitNode(node.condition);
    var statement = node.statement;
    if (statement.kind == as_1.NodeKind.EMPTY) {
      sb.push(")");
    } else {
      sb.push(") ");
      this.visitNode(node.statement);
    }
  }
  // other
  serializeDecorator(node) {
    var sb = this.sb;
    sb.push("@");
    this.visitNode(node.name);
    var args = node.args;
    if (args) {
      sb.push("(");
      let numArgs = args.length;
      if (numArgs) {
        this.visitNode(args[0]);
        for (let i = 1; i < numArgs; ++i) {
          sb.push(", ");
          this.visitNode(args[i]);
        }
      }
      sb.push(")\n");
    } else {
      sb.push("\n");
    }
    as_1.indent(sb, this.indentLevel);
  }
  serializeParameter(node) {
    var sb = this.sb;
    var kind = node.parameterKind;
    var implicitFieldDeclaration = node.implicitFieldDeclaration;
    if (implicitFieldDeclaration) {
      this.serializeAccessModifiers(implicitFieldDeclaration);
    }
    if (kind == as_1.ParameterKind.REST) {
      sb.push("...");
    }
    this.visitIdentifierExpression(node.name);
    var type = node.type;
    var initializer = node.initializer;
    if (type) {
      if (kind == as_1.ParameterKind.OPTIONAL && !initializer) sb.push("?");
      if (!as_1.isTypeOmitted(type)) {
        sb.push(": ");
        this.visitTypeNode(type);
      }
    }
    if (initializer) {
      sb.push(" = ");
      this.visitNode(initializer);
    }
  }
  serializeExternalModifiers(node) {
    var sb = this.sb;
    if (node.is(as_1.CommonFlags.EXPORT)) {
      sb.push("export ");
    } else if (node.is(as_1.CommonFlags.IMPORT)) {
      sb.push("import ");
    } else if (node.is(as_1.CommonFlags.DECLARE)) {
      sb.push("declare ");
    }
  }
  serializeAccessModifiers(node) {
    var sb = this.sb;
    if (node.is(as_1.CommonFlags.PUBLIC)) {
      sb.push("public ");
    } else if (node.is(as_1.CommonFlags.PRIVATE)) {
      sb.push("private ");
    } else if (node.is(as_1.CommonFlags.PROTECTED)) {
      sb.push("protected ");
    }
    if (node.is(as_1.CommonFlags.STATIC)) {
      sb.push("static ");
    } else if (node.is(as_1.CommonFlags.ABSTRACT)) {
      sb.push("abstract ");
    }
    if (node.is(as_1.CommonFlags.READONLY)) {
      sb.push("readonly ");
    }
  }
  finish() {
    var ret = this.sb.join("");
    this.sb = [];
    return ret;
  }
}
exports.ASTBuilder = ASTBuilder;
    