
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
  TopLevelDecorator.registerVisitor(decorator);
  return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
  static registerVisitor(visitor) {
    TopLevelDecorator._visitor = visitor;
  }
  get visitor() {
    return TopLevelDecorator._visitor;
  }
  visitDecoratorNode(node) {
    if (utils_1.decorates(node, this.visitor.name)) {
      this.visitor.currentPath = this.currentParentPath;
      this.visitor.visit(this.currentParent);
    }
  }
  afterParse(_) {
    transformer_1.mergeTransformer(this, this.visitor);
    this.visit(this.program.sources.filter(this.visitor.sourceFilter));
  }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
  /**
   * Default filter that removes library files
   */
  get sourceFilter() {
    return utils_1.not(utils_1.isLibrary);
  }
  getDecorator(node) {
    return utils_1.getDecorator(node, this.name);
  }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {}
exports.VariableDecorator = VariableDecorator;
    