
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

const __1 = require("..");
const as_1 = require("../../as");
const utils_1 = require("../utils");
class FunctionCallTransform extends __1.TransformVisitor {
  visitCallExpression(node) {
    if (node.expression instanceof as_1.IdentifierExpression) {
      if (node.expression.text == "foo") {
        let res = __1.SimpleParser.parseExpression('"hello world"');
        res.range = node.range;
        return res;
      }
    }
    return super.visitCallExpression(node);
  }
  afterParse(_) {
    let sources = _.sources.filter(utils_1.not(utils_1.isLibrary));
    this.visit(sources);
  }
}
module.exports = new FunctionCallTransform();
    