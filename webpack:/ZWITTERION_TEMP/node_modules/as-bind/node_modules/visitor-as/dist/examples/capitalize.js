
        var process = self.process;
        if (!self.ZWITTERION_SOCKET && self.location.host.includes('localhost:')) {
            self.ZWITTERION_SOCKET = new WebSocket('ws://127.0.0.1:5001');
            self.ZWITTERION_SOCKET.addEventListener('message', (message) => {
                self.location.reload();
            });
        }
        "use strict";

const utils_1 = require("../utils");
const decorator_1 = require("../decorator");
class CapitalizeVisitor extends decorator_1.VariableDecorator {
  visitVariableDeclaration(node) {
    this.visit(node.initializer);
  }
  get name() {
    return "capitalize";
  }
  visitStringLiteralExpression(node) {
    const newNode = utils_1.cloneNode(node);
    newNode.value = node.value.toUpperCase();
    this.replaceCurrentNode(newNode);
    this.stdout.write(node.value + " -> " + newNode.value + "\n");
  }
  visitTemplateLiteralExpression(node) {
    if (node.parts.length == 1 && node.expressions.length == 0) {
      const newNode = utils_1.cloneNode(node);
      newNode.parts[0] = node.parts[0].toUpperCase();
      this.replaceCurrentNode(newNode);
      this.stdout.write(node.parts[0] + " -> " + newNode.parts[0] + "\n");
    }
  }
}
module.exports = decorator_1.registerDecorator(new CapitalizeVisitor());
    