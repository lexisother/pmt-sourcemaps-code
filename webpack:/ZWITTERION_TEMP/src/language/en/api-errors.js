const apiErrors = {
    default: 'An error has occurred, please try again.',
    security: {
        noContext: 'No context provided in x-api-context header',
        noToken: 'Your session has expired. Please log back in to PMT',
        badContext: 'Context provided in x-api-context header is not valid',
        badToken: 'Your session has expired. Log back in to use PMT',
    },
    general: {
        generalError: 'General error',
        noAccess: 'No access',
        actionNotPermitted: 'Action not available for this type of account',
        deletionNotPermitted: 'Deletion not permitted',
        editingNotPermitted: 'Editing not permitted',
        creationNotPermitted: 'Creation not permitted',
        changeNotPermitted: 'Change not permitted',
        filterNotAccepted: 'Filter not accepted',
        sortingNotAccepted: 'Sorting not accepted',
        emptyField: 'Field is empty',
        invalidFieldValue: 'Invalid value',
        invalidTimeValue: 'Invalid time',
        invalidTimeFormat: 'Invalid time format',
        missingField: 'Field is required',
        notFound: 'Not found',
        unauthorized: 'Unauthorized',
        mailNotSent: 'Error sending mail',
        routeNotFound: 'The route was not found',
        inactiveUser: 'Not able to change an inactive user',
        forbidden: 'Forbidden',
        invalidAccountId: 'You don\'t have access to this employee',
        networkError: 'Network error. Plaese check your internet connection and try again.',
        alreadyDeleted: 'Shift was already deleted',
    },
    organisations: {
        departmentShortnameExists: 'The chosen shortname was already chosen for another department',
        departmentNameExists: 'The chosen name was already used for another department',
    },
    account: {
        badCredentials: 'Username/password is wrong',
        errorLogin: 'You have failed to login for over 5 times. You are now banned for the next 5 minutes',
        errorSsoLogin: 'Could not authenticate via SSO: employee account was not found in PMT',
        existingUsername: 'Username already exists',
        inactiveAccount: 'Account is not active',
        accessDenied: 'Access is denied',
        storeEnded: 'Your are not allowed to login after the store PMT end date (%s)',
        currentPasswordRequired: 'Current password is needed for changing the password',
        badCurrentPassword: 'Your current password is incorrect',
        noLinkedStore: 'User has no linked store',
        invalidStore: 'Invalid store',
        invalidStoreForAccount: 'Account has no valid store',
        invalidPersonnelNumber: 'Multiple users with the same personnel number',
        form: {
            password: {
                categories: {
                    capitals: 'Capitals',
                    numbers: 'Numbers',
                    symbols: 'Symbols',
                    lower_case_characters: 'Lower case characters',
                },
            },
        },
    },
    accountUpdate: {
        passwordsDoNotMatch: 'The passwords do not match',
        passwordUsernameMatch: 'Username must not be part of password',
        passwordMinLength: 'The password does not match the minimum length of %s',
        passwordComplexityError: 'The password still needs to comply to the following password strength categories: %s',
        invalidPasswordComposition: 'Invalid password composition',
        invalidUsername: 'Username can only consist out of letters, numbers, @, +, ., _ and -',
        invalidUsernameLength: 'Username must be at least 5 chars of length',
        passwordMatchError: 'A new password cannot be the same as your current password, please enter a different password.',
        incorrectPassword: 'Your current password is incorrect',
    },
    fieldsValidations: {
        invalidStartEndDate: 'End date cannot be before start date',
        invalidStartEndTime: 'End time cannot be before start time',
        futureDate: 'Date cannot be in the future',
        pastDate: 'Date cannot be in the past',
        maxNumberOfWeeksExceeded: 'Date range should be a maximum of six weeks',
    },
    schedules: {
        notAllowed: 'You only have access to your schedules',
        pastDate: 'Schedule is in the past',
    },
    substituteRequests: {
        updateNotAllowed: 'Not possible to update requests for other users',
        scheduleNotFound: 'Original schedule not found',
        existingSchedule: 'The selected employee already has a schedule in the select time',
        createForOtherNotAllowed: "You can't create replacement request for another user",
        existingRequest: 'Substitute request already exists',
        invalidEmployee: 'Employee cannot work on this department',
        invalidSubstitute: "You can't create a request with you as substitute",
        invalidStatusFilter: 'Invalid value for status filter',
    },
    requestDayOff: {
        invalidDatePast: "You can't request a day off before %s",
        invalidDateFuture: 'The request cannot start nor end one year in advance',
        existingRequest: 'You already have an approved or pending request on the given day(s)',
        notPendingRequest: 'Only pending requests can be cancelled',
        invalidNumberOfDays: 'The requested number of days is longer than the maximum number of days',
    },
    calendar: {
        termsNotAccepted: 'You should accept terms and conditions',
    },
    availability: {
        singleAvailabilityOverlap: 'The given single availability overlaps with another single availability',
        availabilityOverlap: 'Availabilities from week set overlap each other',
        actionNotPermitted: 'You cannot decrease your availability for this week.',
        invalidLessonHoursValue: 'Lesson hours should be lower or equal with the total number of hours',
        invalidTimesValue: 'All times must be rounded to 15',
        invalidDayStart: 'Day must be the day in week of the date',
        invalidDay: 'Day must be between -3 and 31',
        noOccurrenceAtDate: 'The selected availability event does not occur on the provided date',
        schoolInvalidInterval: 'School hours cannot be more than 12 hours a day',
        schoolInvalidDays: 'School availability types cannot be added on Saturday and Sunday',
        schoolInvalidTimes: 'School availability types should be between 07:00 and 19:00',
        invalidStatusFilter: 'Invalid value for status filter',
        invalidStartDate: 'Availability must start on a Monday',
        managerCommentAccess: 'Only managers can add a manager comment',
        invalidStatus: 'Given status is not allowed',
        invalidRepeat: 'WeekSet availabilities must be recurring',
        employeeCommentAccess: 'Managers are not allowed to add an employee comment',
        approvedNotEditable: 'Approved availabilities are not editable',
        invalidAvailabilityBlock: 'Availability block not found',
        invalidBlockType: 'Managers can only edit agreed blocks',
        invalidRejectStatus: 'Only pending availabilities can be rejected',
        invalidPendingSetsCount: 'Request is not possible. You can only have one availability weekset for the chosen start date',
        availabilityBlockNotEditable: 'Modified availability block is not editable',
        invalidAvailabilityEdit: 'User does not have right to edit desired weekset',
        invalidManagerComment: "Manager comment can't be added for rejected sets by the employee himself",
        recurringNotEditable: 'Recurring availabilities must be edited as part of a weekset',
        actionNotPermittedUntilDate: 'You cannot decrease availability until %s',
        weeksetNotFound: 'Weekset not found',
    },
    storeTimes: {
        dayNotValid: 'Day is not valid',
        timeNotWellFormed: 'Time not well formed (hh:mm:ss) for %s',
        timesNotHalfHour: 'The opening or operational hours are not entered per half hour for %s',
        businessTimesGtOpening: 'Company time start hour is greater than opening hour for %s',
        businessTimesLtClosing: 'Company time end hour is lower than closing hour for %s',
        endTimeLtStart: '%s end time must be greater then start time for %s',
    },
    payrollDetails: {
        invalidWeekStatusFilter: 'Invalid value for week status filter',
    },
    news: {
        departmentOrCategoryNotProvided: 'Department id or news category id need to be specified',
        departmentAndCategoryBothProvided: 'Either department id or news category id should to be specified. Not both',
        invalidPublicNoHome: 'Only news that appear on home can be set as public',
        categoryNotAllowed: 'You cannot set this news category',
        invalidStoreForNews: 'You cannot edit news for other stores',
    },
    assessment: {
        invalidDepartmentAccess: 'You do not have access to the selected department',
        assessmentExists: 'Assessment already exists for this day',
    },
    storeGroups: {
        storeGroupHasStores: 'You cannot remove this store group because at least one store has been assigned',
        duplicateName: 'Name is not unique',
    },
    shifts: {
        indirectHoursExceedsWork: 'You cannot make the shift shorter than the total duration of indirect tasks booked on the shift. Please edit the indirect tasks first.',
        overlapNotAllowed: 'No overlapping shifts allowed',
        departmentNotEditable: 'Departmemt is not editable in exchange store',
        breakExceedsWork: 'Total break duration exceeds shift length',
        breakOutsideShift: 'Break is outside shift interval',
        singleBreakLength: 'The length of a single break should not exceed store defined value',
        instanceOutsideShiftBoundaries: 'Instance is outside of shift boundaries',
        weekNotEditable: 'Week is no longer editable',
        exchangeUserNotAllowed: 'User is not allowed to alter exchanged data',
        exchangeStoreNotAllowed: 'Exchanging to this store is not allowed',
        exchangeNotSupported: 'This store does not support exchange shifts',
        startDateTimePast: 'Start date/time cannot be in the past for a repeating shift',
        invalidLastOccurrence: 'End week must be a week in which the shifts or remarks can occur, based on the frequency.',
        invalidTypeForExchange: 'This type is not supported for exchange shifts',
        storeChangeWithInstances: "You can't change the store for a shift with instances",
        exchangeStoreChangeWithInstances: "You can't change the exchange store for a shift with instances",
        departmentChangeWithInstances: "You can't change the department for a shift with instances",
        weekDayChangeWithInstances: "You can't change the weekday for a shift with instances",
        invalidOccurrenceForInstances: "You can't change date / occurrence values for a shift so that existing instances no longer match",
        maxShiftIntervalExceeded: 'A shift cannot span more than 24 hours',
        deleteWithInstancesNotAllowed: "You can't delete a shift with final instances",
        indirectTaskNotUnique: 'Indirect task should be unique for this shift instance',
        indirectHoursOutsideShift: 'Indirect hours is outside shift interval',
        indirectHoursOverlap: 'Indirect hours cannot overlap other indirect hours',
        durationDoesNotMatchStartTimeAndEndTime: 'Duration does not match start time and end time',
        startTimeAndEndTimeShouldBeProvided: 'If providing a time, both start and end time should be provided',
        instanceShouldBeAssignedToEmployee: 'Shift instance should be assigned to an employee',
        instanceShouldBeAssignedToDepartment: 'Shift instance should be assigned to a department',
        instanceShouldBelongToParentShift: 'Shift instance should belong to parent shift',
        indirectHoursShouldBelongToParentShiftInstance: 'Indirect hours should belong to parent shift instance',
        maxDateIntervalExceeded: 'The provided date filters cannot exceed an interval of 6 weeks',
        durationMandatory: 'A duration is mandatory for shifts without start/end times',
        breakBelowDefault: 'Break time must be higher or equal to the default suggested break',
        breakNotEqualToDefault: 'Break time must be equal to the default suggested break',
        shiftLength: 'Shift should be at least 15 minutes long excluding break',
        breaksOverlap: 'Breaks cannot overlap each other',
        shiftNotCreated: 'Shift could not be created. Rollback initiated.',
        shiftInstanceNotCreated: 'Shift instance could not be created. Rollback initiated.',
        departmentNotInStructure: 'The department {0} is not available anymore in the store structure starting {1}',
        lastOccurrenceFinalizedWeek: 'Recurring shift end date must be equal or higher than the last finalized week.',
        departmentNotInSet: '{employeeName} no longer works for {departmentName} from {date} onwards. If you create a standard schedule for this department, it must end before this date.',
    },
    departmentStatus: {
        weekShouldBeInThePast: 'The week is not in the past.',
        departmentsNotClosed: 'Some departments are not closed.',
        departmentsNotFinalized: 'Department(s) not finalized',
        departmentsClosed: 'Department(s) already closed',
        weekNotReleased: 'Week is not released',
        weekClosed: 'Week is closed',
        weekShouldBeCurrentOrInTheFuture: 'Week is not in the future or current week',
        departmentsNotInStoreStructure: 'Department(s) not in store structure',
    },

    standardRemarks: {
        remarkCannotOverlapExistingRemark: 'You cannot create overlap with an exising day remarks schedule of this employee',
    },
}

export default apiErrors
